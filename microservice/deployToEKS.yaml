trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: microservice-library

stages:
- stage: DeployToEKS
  displayName: 'Deploy MVC App to AWS EKS'
  jobs:
    - job: ApplyK8sManifests
      displayName: 'Apply Kubernetes Manifests'
      steps:
        # Install AWS CLI and kubectl
        - script: |
           
            sudo apt-get update && sudo apt-get install -y unzip curl
            curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

          displayName: 'Install AWS CLI and kubectl'

        # Configure AWS credentials
        - script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
            export AWS_DEFAULT_REGION=$(awsRegion)
            aws sts get-caller-identity
          displayName: 'Set AWS Credentials'

        # Update kubeconfig for EKS cluster
        - script: |
            aws eks update-kubeconfig --region $(awsRegion) --name my-cluster-eks
          displayName: 'Configure kubectl for EKS'

        # Apply Kubernetes manifests
      - script: |
          set -e
          echo "Applying Deployment..."
          kubectl apply -f microservice/deployment.yaml

          echo "Applying Service..."
          kubectl apply -f microservice/service.yaml

          echo "Applying Ingress..."
          kubectl apply -f microservice/ingress.yaml

          echo "Checking Pods..."
          kubectl get pods -o wide

          echo "Checking Deployment Rollout..."
         kubectl rollout status deployment/mvc-app --timeout=120s || {
         echo "Deployment failed. Showing details..."
         kubectl describe deployment mvc-app
         kubectl get pods -o wide
         exit 1}

         echo "Checking Services..."
         kubectl get svc mvc-app-service

         echo "Checking Ingress..."
         kubectl get ingress mvc-app-ingress

         echo "Fetching Application URL..."
         APP_URL=$(kubectl get ingress mvc-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
         echo "Application URL: http://$APP_URL"
        displayName: 'Deploy and Validate MVC App'