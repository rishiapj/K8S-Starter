trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: microservice-library

stages:
- stage: DeployToEKS
  displayName: 'Deploy MVC App to AWS EKS'
  jobs:
    - job: ApplyK8sManifests
      displayName: 'Apply Kubernetes Manifests'
      steps:
        # Update AWS CLI and Install kubectl
        # Install AWS CLI and kubectl
        - script: |
           
            sudo apt-get update && sudo apt-get install -y unzip curl
            curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

          displayName: 'Install AWS CLI and kubectl'

        # Configure AWS credentials
        - script: |
            aws sts get-caller-identity
          displayName: 'Verify AWS Credentials'
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            AWS_DEFAULT_REGION: $(awsRegion)

        # Update kubeconfig for EKS cluster
        - script: |
            aws eks update-kubeconfig --region $(awsRegion) --name my-cluster-eks
            kubectl config current-context
          displayName: 'Configure kubectl for EKS'
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            AWS_DEFAULT_REGION: $(awsRegion)


            
# Grant IAM User access to EKS cluster
        - script: |
            set -e
            echo "Updating aws-auth ConfigMap to grant access for IAM user rishikesh..."
            kubectl patch configmap aws-auth -n kube-system --type merge -p \
            '{"data":{"mapUsers":"- userarn: arn:aws:iam::985809756777:user/rishikesh\n  username: rishikesh\n  groups:\n    - system:masters"}}'
            echo "IAM user rishikesh added to aws-auth ConfigMap."
          displayName: 'Grant IAM User Access to EKS'


        # Apply Kubernetes manifests
        - script: |
            set -e
            echo "Applying Deployment..."
            kubectl apply -f microservice/deployment.yaml
            kubectl rollout status deployment/mvc-app --timeout=120s

            echo "Checking Pods..."
            kubectl get pods -o wide

            echo "Applying Service..."
            kubectl apply -f microservice/service.yaml
            kubectl get svc mvc-app-service

            echo "Applying Ingress..."
            kubectl apply -f microservice/ingress.yaml
            kubectl get ingress mvc-app-ingress

        
