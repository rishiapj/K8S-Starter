trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: microservice-library

stages:
- stage: DeployToEKS
  displayName: 'Deploy MVC App to AWS EKS'
  jobs:
    - job: ApplyK8sManifests
      displayName: 'Apply Kubernetes Manifests'
      - script: |
          set -e
          echo "Updating AWS CLI and installing kubectl..."
          curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

           curl -sSL "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" -o kubectl
           chmod +x kubectl
           sudo mv kubectl /usr/local/bin/
           kubectl version --client
        displayName: 'Update AWS CLI and Install kubectl'


        # Configure AWS credentials
        - script: |
            aws sts get-caller-identity
          displayName: 'Verify AWS Credentials'
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            AWS_DEFAULT_REGION: $(awsRegion)

        # Update kubeconfig for EKS cluster
        - script: |
            aws eks update-kubeconfig --region $(awsRegion) --name my-cluster-eks
            kubectl config current-context
          displayName: 'Configure kubectl for EKS'
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            AWS_DEFAULT_REGION: $(awsRegion)

        # Apply Kubernetes manifests
        - script: |
            set -e
            echo "Applying Deployment..."
            kubectl apply -f microservice/deployment.yaml
            kubectl rollout status deployment/mvc-app --timeout=120s

            echo "Checking Pods..."
            kubectl get pods -o wide
            echo "Applying Service..."
            kubectl apply -f microservice/service.yaml
            kubectl get svc mvc-app-service

            echo "Applying Ingress..."
            kubectl apply -f microservice/ingress.yaml
            kubectl get ingress mvc-app-ingress

            echo "Fetching Application URL..."
            for i in {1..10}; do
              APP_URL=$(kubectl get ingress mvc-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              if [ -n "$APP_URL" ]; then break; fi
              echo "Waiting for ingress hostname..."
              sleep 30
            done
            echo "Application URL: http://$APP_URL"
          displayName: 'Deploy and Validate MVC App'

        # Debugging: Cluster, Deployment, Pods, Events
        - script: |
            echo "=== Cluster Info ==="
            kubectl cluster-info

            echo "=== All Namespaces Pods ==="
            kubectl get pods --all-namespaces -o wide

            echo "=== Describe Deployment ==="
            kubectl describe deployment mvc-app || echo "Deployment not found"

            echo "=== Describe Pods ==="
            for pod in $(kubectl get pods -o jsonpath='{.items[*].metadata.name}'); do
              echo "---- $pod ----"
              kubectl describe pod $pod
            done

            echo "=== Recent Events ==="
            kubectl get events --sort-by=.metadata.creationTimestamp | tail -n 20
          displayName: 'Debug Cluster and Pods'