trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: microservice-library

stages:
# -------------------------------
# Stage 1: Deploy EKS using Terraform
# -------------------------------
- stage: TerraformDeploy
  displayName: 'Deploy AWS EKS using Terraform'
  jobs:
  - job: DeployEKS
    steps:
    # Install Terraform
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip jq
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform -y
      displayName: 'Install Terraform'

    # Export AWS credentials securely
    - script: |
        export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
        export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        export AWS_DEFAULT_REGION=$(awsRegion)
        aws sts get-caller-identity
      displayName: 'Set AWS Credentials'

    # Terraform Init
    - script: terraform init
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Init'

    # Terraform Plan
    - script: terraform plan -out=tfplan
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Plan'

    # Terraform Apply
    - script: |
        terraform apply -auto-approve tfplan
        aws sts get-caller-identity
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Apply'

# -------------------------------
# Stage 2: Configure kubeconfig for EKS
# -------------------------------
- stage: ConfigureKube
  dependsOn: TerraformDeploy
  displayName: 'Configure kubeconfig for EKS'
  jobs:
  - job: KubeSetup
    steps:
    # âœ… Step 4: Assume IAM Role and Configure kubeconfig
    - script: |
        export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
        export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        export AWS_DEFAULT_REGION=$(awsRegion)
        aws sts get-caller-identity
      displayName: 'Set AWS Credentials'
        

    # Install aws-iam-authenticator
    - script: |
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.30.0/2024-07-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin/
      displayName: 'Install aws-iam-authenticator'

    # Apply aws-auth ConfigMap (optional if using Access Entries)
    - script: |
        kubectl apply -f infrastrcture/aws-auth.yaml --validate=false
      displayName: 'Apply aws-auth ConfigMap'

    # Verify cluster
    - script: |
        kubectl get nodes
        kubectl cluster-info
      displayName: 'Verify EKS Cluster'