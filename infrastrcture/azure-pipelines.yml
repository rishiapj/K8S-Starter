trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: microservice-library

stages:
- stage: TerraformDeploy
  displayName: 'Deploy AWS EKS using Terraform'
  jobs:
  - job: DeployEKS
    steps:
    # Install Terraform
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform -y
      displayName: 'Install Terraform'

    # Export AWS credentials securely
    - script: |
        export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
        export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        export AWS_DEFAULT_REGION=$(awsRegion)
        aws sts get-caller-identity
        aws kms delete-alias --alias-name alias/eks/my-aws-eks-cluster --region us-east-1
        aws logs delete-log-group --log-group-name /aws/eks/my-aws-eks-cluster/cluster --region us-east-1     
      
      displayName: 'Set AWS Credentials'

    # Terraform Init
    - script: terraform init
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Init'



    # Terraform Plan
    - script: terraform plan -out=tfplan
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Plan'

    # Terraform Apply
    - script: terraform apply -auto-approve tfplan
      workingDirectory: 'infrastrcture'
      displayName: 'Terraform Apply'

- stage: ConfigureKube
  dependsOn: TerraformDeploy
  displayName: 'Configure kubeconfig for EKS'
  jobs:
  - job: KubeSetup
    steps:
    - script: |
        export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
        export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        export AWS_DEFAULT_REGION=$(awsRegion)
        aws eks update-kubeconfig --region $(awsRegion) --name $(eksClusterName)
      displayName: 'Configure kubeconfig'

    - script: kubectl get nodes
      displayName: 'Verify EKS Cluster'

    # âœ… Apply aws-auth ConfigMap from file
    - script: |
        kubectl apply -f infrastrcture/aws-auth.yaml
      displayName: 'Apply aws-auth ConfigMap'